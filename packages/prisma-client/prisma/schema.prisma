generator client {
  provider = "prisma-client-js"
  output   = "../dist"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  login         String         @unique
  email         String?        @unique
  name          String
  password      String
  avatarId      String?
  website       String?
  isVerified    Boolean        @default(false)
  blockedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  commentVotes  CommentVote[]
  invite        Invite?        @relation(name: "Invite")
  invites       Invite[]       @relation(name: "Invites")
  posts         Post[]
  postVotes     PostVote[]
  notifications Notification[]
}

model Invite {
  id        Int    @id @default(autoincrement())
  code      String @unique
  inviteeId Int?   @unique
  inviterId Int
  invitee   User?  @relation(name: "Invite", fields: [inviteeId], references: [id], onDelete: Cascade)
  inviter   User   @relation(name: "Invites", fields: [inviterId], references: [id], onDelete: Cascade)
}

model Subsite {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  slug        String   @unique
  avatar      String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  posts       Post[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String?
  contentV1   String?
  contentV2   Json?
  authorId    Int
  subsiteId   Int?
  score       Int        @default(0)
  viewCount   Int        @default(0)
  isPublished Boolean    @default(true)
  isPinned    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  subsite     Subsite?   @relation(fields: [subsiteId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       PostVote[]

  useless1 ReplyToPostNotification[]
}

model PostVote {
  id        Int      @id @default(autoincrement())
  sign      Int
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  postId    Int
  authorId  Int
  parentId  Int?
  text      String?
  imageId   String?
  score     Int           @default(0)
  createdAt DateTime      @default(now())
  editedAt  DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation(name: "Comment", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation(name: "Comment")
  votes     CommentVote[]

  useless1 ReplyToPostNotification[]
  useless2 ReplyToCommentNotification[] @relation(name: "ReplyTo")
  useless3 ReplyToCommentNotification[] @relation(name: "Reply")
}

model CommentVote {
  id        Int      @id @default(autoincrement())
  sign      Int
  commentId Int?
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model Notification {
  id                         Int                         @id @default(autoincrement())
  userId                     Int
  readAt                     DateTime?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  user                       User                        @relation(fields: [userId], references: [id])
  replyToPostNotification    ReplyToPostNotification?
  replyToCommentNotification ReplyToCommentNotification?
}

model ReplyToPostNotification {
  id             Int          @id @default(autoincrement())
  notificationId Int          @unique
  replyToId      Int
  replyId        Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  replyTo        Post         @relation(fields: [replyToId], references: [id])
  reply          Comment      @relation(fields: [replyId], references: [id])
}

model ReplyToCommentNotification {
  id             Int          @id @default(autoincrement())
  notificationId Int          @unique
  replyToId      Int
  replyId        Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  replyTo        Comment      @relation(name: "ReplyTo", fields: [replyToId], references: [id])
  reply          Comment      @relation(name: "Reply", fields: [replyId], references: [id])
}
